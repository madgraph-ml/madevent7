name: Publish

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build_wheels_linux:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v5

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_BEFORE_ALL: >
            yum clean all &&
            yum -y install openblas-devel yum-utils &&
            yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo &&
            yum -y install cuda-nvcc-12-8 cuda-cudart-devel-12-8 cuda-thrust-12-8 libcublas-devel-12-8 libcurand-devel-12-8
          CIBW_REPAIR_WHEEL_COMMAND: >
            auditwheel repair
            --exclude libmadevent.so
            --exclude 'libcublas.so.*'
            --exclude 'libcurand.so.*'
            --exclude 'libcublasLt.so.*'
            --exclude 'libcudart.so.*'
            -w {dest_dir} {wheel}
          CIBW_ENVIRONMENT: PATH=$PATH:/usr/local/cuda/bin
          CIBW_TEST_REQUIRES: pytest numpy torch
          CIBW_TEST_COMMAND: pytest {project}/tests

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_wheels_macos:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14]

    steps:
      - uses: actions/checkout@v5

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          MACOSX_DEPLOYMENT_TARGET: 14.5
          CIBW_REPAIR_WHEEL_COMMAND: >
            delocate-wheel
            --ignore-missing-dependencies
            --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
          CIBW_TEST_REQUIRES: pytest numpy torch
          CIBW_TEST_COMMAND: pytest {project}/tests

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
      - build_wheels_linux
      - build_wheels_macos
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/madnis
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign with Sigstore, upload to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
